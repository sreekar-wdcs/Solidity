pragma solidity ^0.5.0;
contract BetList  {
  //callBet private _instance;
  struct Bet {
    uint id;
    address challenger;
    address accepter;
    string name;
    string conditions;
    uint256 price;
  }
  mapping (uint => Bet) public bets;
  uint betCounter;
  event LogPublishBet(
    uint indexed _id,
    address indexed _challenger,
    string _name,
    uint256 _price
  );
  event LogAcceptBet(
    uint indexed _id,
    address indexed _challenger,
    address indexed _accepter,
    string _name,
    uint256 _price
  );

  // Publish a new bet
  function publishBet(address _instance, string _name, string _conditions, uint256 _price) payable public {
    // The challenger must deposit his bet
    require(_price > 0 && msg.value == _price);
    // A new bet
    betCounter++;
    // Store this bet into the contract
    bets[betCounter] = Bet(
      betCounter,
      msg.sender,
      0x0,
      _name,
      _conditions,
      _price
    );

    address(_instance).transfer(msg.value);
    // Trigger a log event
    emit LogPublishBet(betCounter, msg.sender, _name, _price);
  }

  function getBalance() public view returns(uint) {
        return address(this).balance;
    }
    
  // Fetch the total number of bets in the contract
  function getNumberOfBets() public view returns (uint) {
    return betCounter;
  }
  // Fetch and return all bet IDs for bets that are still available
  function getAvailableBets() public view returns (uint[]) {
    uint[] memory betIds = new uint[](betCounter);
    uint numberOfAvailableBets = 0;
    // Iterate over all bets
    for(uint i = 1; i <= betCounter; i++) {
      // Keep the ID if the bet is still available
      if(bets[i].accepter == 0x0) {
        betIds[numberOfAvailableBets] = bets[i].id;
        numberOfAvailableBets++;
      }
    }
    uint[] memory availableBets = new uint[](numberOfAvailableBets);
    // Copy the betIds array into a smaller availableBets array to get rid of empty indexes
    for(uint j = 0; j < numberOfAvailableBets; j++) {
      availableBets[j] = betIds[j];
    }
    return availableBets;
  }
  // Accept a bet
  function acceptBet(address _instance, uint _id) payable public {
    // Check whether there is a bet published
    require(betCounter > 0);
    // Check that the bet exists
    require(_id > 0 && _id <= betCounter);
    // Retrieve the bet
    Bet storage bet = bets[_id];
    // Check that the bet has not been accepted yet
    require(bet.accepter == 0x0);
    // Don't allow the challenger to accept his own bet
    require(msg.sender != bet.challenger);
    // The accepter must deposit his bet
    require(msg.value == bet.price);
    bet.accepter = msg.sender;
    // Trigger a log event
    address(_instance).transfer(msg.value);
    emit LogAcceptBet(_id, bet.challenger, bet.accepter, bet.name, bet.price);
  }
}

contract recieves {

  BetList internal bet;
    
    function() public payable {
    }

    function publishBet( string _name, string _conditions, uint256 _price) payable public {
      bet = new BetList();
      address _bet = address(bet);
      payable(_bet).transfer(msg.value);
      betCounter++;
    }

    function getBalance() public view returns(uint) {
        return address(this).balance;
    }
}

